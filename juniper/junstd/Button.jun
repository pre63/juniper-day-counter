module Button
open(Prelude, Io)

(*
    Interface: Button
*)

(*
    Type: buttonState

    The buttonState type is used by the debounce functions to store state.

    | buttonState

    Members:
        actualState : Io:pinState - The actual state of the button
        lastState : Io:pinState - The last state of the button (on the previous
            update)
        lastDebounceTime : uint32 - The last debounce time
*)
type buttonState = { actualState : pinState; lastState : pinState; lastDebounceTime : uint32 }

(*
    Function: state

    Returns a new <buttonState>, initializing the actualState to Io:low(),
    lastState to Io:low() and lastDebounceTime to 0

    Type Signature:
    | () -> buttonState ref

    Returns:
        A new <buttonState>
*)
fun state() : buttonState ref = (
    ref buttonState { actualState = Io:low(); lastState = Io:low(); lastDebounceTime = 0 }
)

(*
    Function: debounceDelay

    Debounces the incoming Io:pinState signal by checking twice in a short
    period of time to make sure the pushbutton is definitely pressed.

    Type Signature:
    | (sig<pinState>, uint16, buttonState ref) -> sig<pinState>

    Parameters:
        incoming : sig<pinState> - The incoming signal
        delay : uint16 - The amount of time to wait in milliseconds before
            checking the pushbutton again
        buttonState : buttonState ref - Used to keep track of state between
            debounce calls

    Returns:
        A signal that will ideally reflect the actual state of the button.

    See Also:
        Io:risingEdge, Io:fallingEdge, Io:edge
*)
fun debounceDelay(incoming : sig<pinState>, delay : uint16, buttonState : buttonState ref) : sig<pinState> =
    Signal:map<pinState, pinState>(fn (currentState : pinState) : pinState ->
        (let buttonState {actualState=actualState;
                          lastState=lastState;
                          lastDebounceTime=lastDebounceTime} = !buttonState;
        if currentState != lastState then
            (set ref buttonState = buttonState { actualState = actualState;
                                                 lastState = currentState;
                                                 lastDebounceTime = Time:now() };
            actualState)
        elif (currentState != actualState) and ((Time:now() - (!buttonState).lastDebounceTime) > delay) then
            (set ref buttonState = buttonState { actualState = currentState;
                                                 lastState = currentState;
                                                 lastDebounceTime = lastDebounceTime};
            currentState)
        else
            (set ref buttonState = buttonState { actualState = actualState;
                                                 lastState = currentState;
                                                 lastDebounceTime = lastDebounceTime };
            actualState)
        end)
    end, incoming)

(*
    Function: debounce

    Debounces the incoming Io:pinState signal by checking twice in 50 ms to make
    sure the pushbutton is definitely pressed.

    Type Signature:
    | (sig<pinState>, buttonState ref) -> sig<pinState>

    Parameters:
        incoming : sig<pinState> - The incoming signal
        buttonState : buttonState ref - Used to keep track of state between
            debounce calls

    Returns:
        A signal that will ideally reflect the actual state of the button.

    See Also:
        Io:risingEdge, Io:fallingEdge, Io:edge
*)
fun debounce(incoming : sig<pinState>, buttonState : buttonState ref) : sig<pinState> =
    debounceDelay(incoming, 50, buttonState)

module Signal
open(Prelude)

(*
    Interface: Signal
*)

(*
    Function: map

    Applies a function f to the given input signal

    Type signature:
    | <'a,'b>(('a) -> 'b, sig<'a>) -> sig<'b>

    Parameters:
        f : ('a) -> 'b - The mapping function
        s : sig<'a> - The input signal

    Returns:
        The signal transformed by the mapping function
*)
fun map<'a,'b>(f : ('a) -> 'b, s : sig<'a>) : sig<'b> =
    case s of
    | signal<'a>(just<'a>(val)) => signal<'b>(just<'b>(f(val)))
    | _                         => signal<'b>(nothing<'b>())
    end

(*
    Function: sink

    Applies the function on the given signal for the purpose of performing
    side effects.

    Type signature:
    | <'a>(('a) -> unit, sig<'a>) -> unit

    Parameters:
        f : ('a) -> unit - The function to call
        s : sig<'a> - The input signal

    Returns:
        Unit
*)
fun sink<'a>(f : ('a) -> unit, s : sig<'a>) : unit =
    case s of
    | signal<'a>(just<'a>(val)) => f(val)
    | _ => ()
    end

(*
    Function: filter

    Filters a signal using the given predicate function. If the function returns
    true, the signal is filtered and the output signal will contain nothing. If
    the function returns false, the signal is unfiltered and the output signal
    will be the same as the input signal.

    Type signature:
    | <'a>(('a') -> bool, sig<'a>) -> sig<'a>

    Parameters:
        f : ('a) -> bool - The predicate function
        s : sig<'a> - The input signal

    Returns:
        The filtered output signal.
*)
fun filter<'a>(f : ('a) -> bool, s : sig<'a>) : sig<'a> =
    case s of
    | signal<'a>(just<'a>(val)) =>
        if f(val) then
            signal<'a>(nothing<'a>())
        else
            s
        end
    | _ =>
        signal<'a>(nothing<'a>())
    end

(*
    Function: merge

    Merges streams of the same type together. If sigA has a value, then
    sigA is returned. Otherwise sigB is returned.

    Type signature:
    | merge<'a>(sig<'a>, sig<'a>) -> sig<'a>

    Parameters:
        sigA : sig<'a> - The first signal to merge
        sigB : sig<'b> - The second signal to merge

    Returns:
        A signal of the two merged streams
*)
fun merge<'a>(sigA : sig<'a>, sigB : sig<'a>) : sig<'a> =
    case sigA of
    | signal<'a>(just<'a>(_)) => sigA
    | _                       => sigB
    end

(*
    Function: mergeMany

    Merges multiple signals together. The leftmost stream holding a value
    is the value held by the return signal. If none of the given signals
    holds a value, then the return stream will hold nothing.

    Type signature:
    | <'a;n>(list<sig<'a>;n>) -> sig<'a>

    Parameters:
        sigs : list<sig<'a>;n> - A list of signals to merge together.
*)
fun mergeMany<'a;n>(sigs : list<sig<'a>;n>) : sig<'a> = (
    let mutable ret = nothing<'a>();
    for i : uint32 in 0 to n - 1 do
        case ret of
        | nothing<'a>() =>
            (let signal<'a>(heldValue) = List:nth<sig<'a>;n>(i, sigs);
            set ret = heldValue;
            ())
        | _ =>
            ()
        end
    end;
    signal<'a>(ret))

(*
    Function: join

    Joins streams of two types together. If sigA has a value, then
    Prelude:left is used to construct the output signal. Otherwise if
    sigB has a value then Prelude:right is used to construct the output
    signal. If neither sigA or sigB holds a value, then the output signal
    also holds no value.

    Type signature:
    | <'a,'b>(sig<'a>, sig<'b>) -> sig<either<'a,'b>>

    Parameters:
        sigA : sig<'a> - The first signal to join
        sigB : sig<'b> - The second signal to join

    Returns:
        A signal of the two joined streams.
*)
fun join<'a,'b>(sigA : sig<'a>, sigB : sig<'b>) : sig<either<'a,'b>> =
    case (sigA, sigB) of
    | (signal<'a>(just<'a>(value)), _) =>
        signal<either<'a,'b>>(just<either<'a,'b>>(left<'a,'b>(value)))
    | (_, signal<'b>(just<'b>(value))) =>
        signal<either<'a,'b>>(just<either<'a,'b>>(right<'a,'b>(value)))
    | _ =>
        signal<either<'a,'b>>(nothing<either<'a,'b>>())
    end

(*
    Function: toUnit

    Maps a signal of some type to a signal of units. If sig holds a value,
    then the output signal holds unit. Otherwise the output signal holds
    nothing.

    Type signature:
    | <'a>(sig<'a>) -> sig<unit>

    Parameters:
        s : sig<'a> - The signal to convert to a unit signal

    Returns:
        A signal of units.
*)
fun toUnit<'a>(s : sig<'a>) : sig<unit> =
    map<'a, unit>(fn (x : 'a) : unit -> () end, s)

(*
    Function: foldP

    Creates a past dependent signal. If the incoming signal contains a
    value, f will be called on the value and the previous state and the
    return value from this function determines the new state. The state
    is held in a reference. foldP stands for fold over the past.

    Type signature:
    | foldP<'a,'state>(('a,'state)->'state, 'state ref, sig<'a>) -> sig<'state>

    Parameters:
        f : ('a,'state) -> 'state - The folding function
        state0 : 'state ref - A reference to the mutable state
        incoming : sig<'a> - The signal of incoming values

    Returns:
        A signal containing the state just returned by f, or nothing if
        the input signal contained nothing.
*)
fun foldP<'a, 'state>(f : ('a,'state)->'state, state0 : 'state ref, incoming : sig<'a>) : sig<'state> =
    case incoming of
    | signal<'a>(just<'a>(val)) =>
        (let state1 = f(val, !state0);
        set ref state0 = state1;
        signal<'state>(just<'state>(state1)))
    | _ =>
        signal<'state>(nothing<'state>())
    end

(*
    Function: dropRepeats

    Drop values that have been repeated on the given signal.

    Type signature:
    | <'a>(sig<'a>, maybe<'a> ref) -> sig<'a>

    Parameters:
        incoming : sig<'a> - The incoming signal
        maybePrevValue : maybe<'a> ref - A reference holding the previous value
            or none if there hasn't been a previous value yet

    Returns:
        A filtered signal where two values in a row will not be repeated.
*)
fun dropRepeats<'a>(incoming : sig<'a>, maybePrevValue : maybe<'a> ref) : sig<'a> =
    filter<'a>(
        fn (value : 'a) : bool ->
            (let filtered =
                case !maybePrevValue of
                | nothing<'a>() => false
                | just<'a>(prevValue) => value == prevValue
                end;
            if not filtered then
                (set ref maybePrevValue = just<'a>(value);
                ())
            else
                ()
            end;
            filtered)
        end,
        incoming)

(*
    Function: latch

    Constantly emmits the value held in the latch. The value held in the latch
    is updated if it receives a value on the incoming signal.

    Type Signature:
    | <'a>(sig<'a>, 'a ref) -> sig<'a>

    Parameters:
        incoming : sig<'a> - The incoming latch update signal
        prevValue : 'a ref - Holds the previous values that the latch received

    Returns:
        A signal which constantly emmits the value last received on the incoming
        signal.
*)
fun latch<'a>(incoming : sig<'a>, prevValue : 'a ref) : sig<'a> =
    case incoming of
    | signal<'a>(just<'a>(val)) =>
        (set ref prevValue = val;
        incoming)
    | _ =>
        signal<'a>(just<'a>(!prevValue))
    end

(*
    Function: map2

    Applys a mapping function to two signals. The function is evaluated when
    a value arrives on either signal. If no value is held by either of the input
    signals, then the output signal holds no value.

    Type Signature:
    | <'a,'b,'c>(('a,'b)->'c, sig<'a>, sig<'b>, ('a*'b) ref) -> sig<'c>

    Parameters:
        f : ('a,'b) -> 'c - The mapping function
        incomingA : sig<'a> - The first signal
        incomingB : sig<'b> - The second signal
        state : ('a * 'b) ref - Holds the last values received from the signals.

    Returns:
        The mapped signal
*)
fun map2<'a,'b,'c>(f : ('a, 'b) -> 'c,
                   incomingA : sig<'a>,
                   incomingB : sig<'b>,
                   state : ('a * 'b) ref) : sig<'c> = (
    let valA = case incomingA of
               | signal<'a>(just<'a>(val1 : 'a)) => val1
               | _ => fst<'a,'b>(!state)
               end;
    let valB = case incomingB of
               | signal<'b>(just<'b>(val2 : 'b)) => val2
               | _ => snd<'a,'b>(!state)
               end;
    set ref state = (valA, valB);
    case (incomingA, incomingB) of
    | (signal<'a>(nothing<'a>()), signal<'b>(nothing<'b>())) => signal<'c>(nothing<'c>())
    | _ => signal<'c>(just<'c>(f(valA, valB)))
    end
)

(*
    Function: record

    Records values in a list as they come in through the incoming signal.

    Type Signature:
    | <'a;n>(sig<'a>, list<'a;n> ref) -> sig<list<'a;n>>

    Parameters:
        incoming : sig<'a> - Incoming values to record
        pastValues : list<'a;n> ref - Previous values recorded from the signal

    Returns:
        A signal holding the list of previous values
*)
fun record<'a;n>(incoming : sig<'a>, pastValues : list<'a;n> ref) : sig<list<'a;n>> =
    foldP<'a,list<'a;n>>(List:pushOffFront<'a;n>, pastValues, incoming)

(*
    Function: constant

    Gives a signal holding a specific value.

    Type Signature:
    | <'a>('a) -> sig<'a>

    Parameters:
        val : 'a - The value that will be held within the signal

    Returns:
        A signal containing the given value
*)
fun constant<'a>(val : 'a) : sig<'a> =
    signal<'a>(just<'a>(val))

(*
    Function: meta

    Performs a meta analysis on a signal, and outputs this result
    in a signal. The output signal will hold a value of nothing
    when there is no value on the input signal, and will return
    just the value if there is a value on the input signal.
    The output signal will always hold a value, which makes it useful
    for many applications.

    Type Signature:
    | <'a>(sig<'a>) -> sig<maybe<'a>>

    Parameters:
        sigA : sig<'a> - The signal on which the meta analysis will be performed

    Returns:
        A signal of either nothing or just the value of the input signal
*)
fun meta<'a>(sigA : sig<'a>) : sig<maybe<'a>> = (
    let signal<'a>(val) = sigA;
    constant<maybe<'a>>(val)
)

(*
    Function: unmeta

    The opposite of the meta function. If the input signal holds a value of
    nothing, then the output signal will not hold a value. If the input signal
    holds just a value, then the output signal will hold that value.

    Type Signature:
    | <'a>(sig<maybe<'a>>) -> sig<'a>

    Parameters:
        sigA : sig<maybe<'a>> - The signal to "make concrete"

    Returns:
        A signal that holds a value in the case of the input signal holding
        just a value, and holds no value otherwise.
*)
fun unmeta<'a>(sigA : sig<maybe<'a>>) : sig<'a> =
    case sigA of
    | signal<maybe<'a>>(just<maybe<'a>>(just<'a>(val))) =>
        constant<'a>(val)
    | _ =>
        signal<'a>(nothing<'a>())
    end

(*
    Function: zip

    Zips two signals together, so that if a value is received on either signal,
    then the output signal will also contain the latest value from the other
    signal. If no value is held by either of the input signals, then the output
    signal holds no value.

    Type Signature:
    | <'a,'b>(sig<'a>, sig<'b>, ('a * 'b) ref) -> sig<'a * 'b>

    Parameters:
        sigA : sig<'a> - The first signal to zip
        sigB : sig<'b> - The second signal to zip
        state : ('a * 'b) ref - The state holding the past values of the signals

    Returns:
        A zipped signal.
*)
fun zip<'a,'b>(sigA : sig<'a>, sigB : sig<'b>, state : ('a * 'b) ref) : sig<('a * 'b)> =
    map2<'a,'b,'a*'b>(
        fn (valA : 'a, valB : 'b) : ('a * 'b) ->
            (valA, valB)
        end, sigA, sigB, state)

(*
    Function: unzip

    Unzips two signals apart, so that the tuple on the incoming signal is split
    into two signals.

    Type Signature:
    | <'a,'b>(sig<'a * 'b>) -> (sig<'a> * sig<'b>)

    Parameters:
        incoming : sig<'a> - The signal to unzip

    Returns:
        Two signals inside a tuple
*)
fun unzip<'a,'b>(incoming : sig<'a*'b>) : sig<'a>*sig<'b> =
    case incoming of
    | signal(just((x, y))) => (signal(just(x)), signal(just(y)))
    | _ => (signal(nothing()), signal(nothing()))
    end

(*
    Function: toggle

    If a value is carried on the incoming signal, then the output signal holds
    a value of val2 if the value stored in state is equal to val1; otherwise,
    the output signal holds a value of val1. If no value is carried on the
    incoming signal, then no value is outputted on the return signal.

    Type Signature:
    | <'a,'b>('a, 'a, 'a ref, sig<'b>) -> sig<'a>

    Parameters:
        val1 : 'a - The first value to toggle between
        val2 : 'a - The second value to toggle between
        state : 'a ref - Holds the previous value outputted on the return signal
        incoming : sig<'b> - The signal which will trigger a toggle

    Returns:
        A signal containing either val1 or val2, depending on what was
        previously value carried on the output signal.
*)
fun toggle<'a,'b>(val1 : 'a, val2 : 'a, state : 'a ref, incoming : sig<'b>) : sig<'a> =
    incoming |>
    foldP(fn (event, prevVal) ->
              if prevVal == val1 then
                  val2
              else
                  val1
              end
          end, state)
